#pragma once

#include <string>
#include <sstream>
#include <memory>
#include "scan_results.h"

class IVulnerablity {
public:
	/**
	 * get CVE name
	 */
	virtual std::string getCVE() = 0;

	/**
	 * get confidence level, higher level means more confident
	 */
	virtual DETECTION_CONFIDENCE getConfidenceLevel() = 0;

	/**
	* set detection status
	*/
	virtual void setDetectStatus(DETECTION_STATUS status) = 0;

	/**
	* get detection status
	*/
	virtual DETECTION_STATUS getDetectStatus() = 0;

	/**
	 * append addtional detection status
	 */
	virtual void appendDetectStatus(DETECTION_STATUS status) = 0;
};


class CVulnerablity : public IVulnerablity {

public:
	CVulnerablity(std::string sCVE);


public:
	inline std::string getCVE() { return sCVE; }

	inline DETECTION_CONFIDENCE getConfidenceLevel() { 
		return detectionToConfidence(status); 
	}

	inline void setDetectStatus(DETECTION_STATUS status) {
		this->status = status;
	}

	inline DETECTION_STATUS getDetectStatus() { return status; }

	inline void appendDetectStatus(DETECTION_STATUS status) { 
		this->status |= status; 
	}

private:


private:
	std::string sCVE;
	DETECTION_STATUS status;
};


class CVulnerablityFactory {
public:
	static std::shared_ptr<IVulnerablity> getVulnerablity(std::string sCVE) {
		return std::make_shared<CVulnerablity>(sCVE);
	}
};